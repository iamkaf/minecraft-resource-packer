// Utility responsible for packaging a project directory into a distributable
// resource pack zip.  The output always includes a minimal `pack.mcmeta` file.

import fs from 'fs';
import archiver from 'archiver';
import { packFormatForVersion } from '../minecraft/packFormat';

export interface ExportSummary {
  fileCount: number;
  totalSize: number;
  durationMs: number;
  warnings: string[];
}

// Export the contents of `projectPath` into `outPath` as a zip archive.
export function exportPack(
  projectPath: string,
  outPath: string,
  version = '1.21.1'
): Promise<ExportSummary> {
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(outPath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    const warnings: string[] = [];
    let fileCount = 0;
    const start = Date.now();

    output.on('close', () => {
      const durationMs = Date.now() - start;
      const totalSize = archive.pointer();
      resolve({ fileCount, totalSize, durationMs, warnings });
    });

    archive.on('warning', (err) => warnings.push(err.message));
    archive.on('error', (err) => reject(err));
    archive.on('entry', () => {
      fileCount++;
    });

    archive.pipe(output);
    archive.directory(projectPath, false);
    // Add a default pack.mcmeta so Minecraft recognises the pack.
    const format = packFormatForVersion(version) ?? 15;
    const mcmeta = {
      pack: { pack_format: format, description: 'Generated by mc-pack-tool' },
    };
    archive.append(JSON.stringify(mcmeta, null, 2), { name: 'pack.mcmeta' });
    archive.finalize();
  });
}
