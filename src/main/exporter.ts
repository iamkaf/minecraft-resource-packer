// Utility responsible for packaging a project directory into a distributable
// resource pack zip.  The output always includes a minimal `pack.mcmeta` file.

import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import { packFormatForVersion } from '../shared/packFormat';
import { ProjectMetadataSchema } from '../shared/project';
import type { IpcMain } from 'electron';
import { dialog } from 'electron';

export interface ExportSummary {
  fileCount: number;
  totalSize: number;
  durationMs: number;
  warnings: string[];
}

// Export the contents of `projectPath` into `outPath` as a zip archive.
export function exportPack(
  projectPath: string,
  outPath: string,
  version = '1.21.1'
): Promise<ExportSummary> {
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(outPath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    const warnings: string[] = [];
    let fileCount = 0;
    const start = Date.now();

    output.on('close', () => {
      const durationMs = Date.now() - start;
      const totalSize = archive.pointer();
      resolve({ fileCount, totalSize, durationMs, warnings });
    });

    archive.on('warning', (err) => warnings.push(err.message));
    archive.on('error', (err) => reject(err));
    archive.on('entry', () => {
      fileCount++;
    });

    archive.pipe(output);
    let skip = new Set<string>();
    try {
      const data = JSON.parse(
        fs.readFileSync(path.join(projectPath, 'project.json'), 'utf-8')
      );
      const meta = ProjectMetadataSchema.parse(data);
      skip = new Set(meta.noExport ?? []);
    } catch {
      /* ignore */
    }
    archive.directory(projectPath, false, (entry) => {
      const rel = entry.name.split(path.sep).join('/');
      if (skip.has(rel)) return false;
      return entry;
    });
    // Add a default pack.mcmeta so Minecraft recognises the pack.
    const format = packFormatForVersion(version) ?? 15;
    const mcmeta = {
      pack: { pack_format: format, description: 'Generated by mc-pack-tool' },
    };
    archive.append(JSON.stringify(mcmeta, null, 2), { name: 'pack.mcmeta' });
    archive.finalize();
  });
}

export async function exportProjects(
  baseDir: string,
  names: string[]
): Promise<void> {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    title: 'Select Export Folder',
    properties: ['openDirectory', 'createDirectory'],
  });
  if (canceled || filePaths.length === 0) return;
  const dir = filePaths[0];
  for (const name of names) {
    const src = path.join(baseDir, name);
    const out = path.join(dir, `${name}.zip`);
    await exportPack(src, out).catch(() => {
      throw new Error(`Failed to export ${name}`);
    });
  }
}

export function registerExportHandlers(ipc: IpcMain, baseDir: string) {
  ipc.handle(
    'export-project',
    async (_e, projectPath: string): Promise<ExportSummary | void> => {
      const { canceled, filePath } = await dialog.showSaveDialog({
        title: 'Export Pack',
        defaultPath: `${projectPath}/pack.zip`,
        filters: [{ name: 'Zip Files', extensions: ['zip'] }],
      });
      if (canceled || !filePath) return;
      return exportPack(projectPath, filePath);
    }
  );
  ipc.handle('export-projects', (_e, names: string[]) =>
    exportProjects(baseDir, names)
  );
}
