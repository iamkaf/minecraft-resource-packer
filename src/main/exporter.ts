// Utility responsible for packaging a project directory into a distributable
// resource pack zip.  The output always includes a minimal `pack.mcmeta` file.

import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import { packFormatForVersion } from '../shared/packFormat';
import type { IpcMain } from 'electron';
import { dialog } from 'electron';
import { getDefaultExportDir, setDefaultExportDir } from './layout';
import { readProjectMeta } from './projectMeta';

export interface ExportSummary {
  fileCount: number;
  totalSize: number;
  durationMs: number;
  warnings: string[];
}

/**
 * Recursively add a directory and all of its files to an archiver instance.
 */
function addDirectory(
  archive: archiver.Archiver,
  dir: string,
  ignore: Set<string>,
  prefix = ''
): void {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const entry of entries) {
    const rel = path.join(prefix, entry.name).split(path.sep).join('/');
    if (ignore.has(rel)) continue;
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      if (entry.name === '.history') continue;
      addDirectory(archive, full, ignore, rel);
    } else {
      archive.file(full, { name: rel });
    }
  }
}

/**
 * Export the contents of `projectPath` into `outPath` as a zip archive.
 *
 * Algorithm:
 * 1. Read `project.json` if present to obtain the list of files that should be
 *    excluded from the archive.
 * 2. Create an archiver instance and stream a zip to `outPath`.
 * 3. Recursively walk the project directory, adding all files that are not
 *    listed in `noExport`.
 * 4. Append a default `pack.mcmeta` containing the correct `pack_format` for
 *    the requested Minecraft version.
 * 5. Resolve with summary statistics once archiving completes.
 */
export async function exportPack(
  projectPath: string,
  outPath: string,
  minecraftVersion?: string
): Promise<ExportSummary> {
  let ignore = new Set<string>();
  let metaVersion: string | undefined;
  if (fs.existsSync(path.join(projectPath, 'project.json'))) {
    try {
      const meta = await readProjectMeta(projectPath);
      ignore = new Set(meta.noExport ?? []);
      metaVersion = meta.minecraft_version;
    } catch {
      /* ignore */
    }
  }
  return new Promise((resolve, reject) => {
    const output = fs.createWriteStream(outPath);
    const archive = archiver('zip', { zlib: { level: 9 } });

    const warnings: string[] = [];
    let fileCount = 0;
    const start = Date.now();

    output.on('close', () => {
      const durationMs = Date.now() - start;
      const totalSize = archive.pointer();
      resolve({ fileCount, totalSize, durationMs, warnings });
    });

    archive.on('warning', (err) => warnings.push(err.message));
    archive.on('error', (err) => reject(err));
    archive.on('entry', () => {
      fileCount++;
    });

    archive.pipe(output);

    addDirectory(archive, projectPath, ignore);
    // Add a default pack.mcmeta so Minecraft recognises the pack.
    const ver = minecraftVersion ?? metaVersion ?? '1.21.1';
    const format = packFormatForVersion(ver) ?? 15;
    const mcmeta = {
      pack: { pack_format: format, description: 'Generated by mc-pack-tool' },
    };
    archive.append(JSON.stringify(mcmeta, null, 2), { name: 'pack.mcmeta' });
    archive.finalize();
  });
}

export async function exportProjects(
  baseDir: string,
  names: string[]
): Promise<void> {
  const { canceled, filePaths } = await dialog.showOpenDialog({
    title: 'Select Export Folder',
    defaultPath: getDefaultExportDir(),
    properties: ['openDirectory', 'createDirectory'],
  });
  if (canceled || filePaths.length === 0) return;
  const dir = filePaths[0];
  for (const name of names) {
    const src = path.join(baseDir, name);
    let version = '0.0.0';
    let minecraftVersion = 'unknown';
    if (fs.existsSync(path.join(src, 'project.json'))) {
      try {
        const meta = await readProjectMeta(src);
        version = meta.version;
        minecraftVersion = meta.minecraft_version;
      } catch {
        /* ignore */
      }
    }
    const out = path.join(dir, `${name}-v${version}.zip`);
    await exportPack(src, out, minecraftVersion).catch(() => {
      throw new Error(`Failed to export ${name}`);
    });
  }
  setDefaultExportDir(dir);
}

export function registerExportHandlers(ipc: IpcMain, baseDir: string) {
  ipc.handle(
    'export-project',
    async (_e, projectPath: string): Promise<ExportSummary | void> => {
      let version = '0.0.0';
      let minecraftVersion = 'unknown';
      if (fs.existsSync(path.join(projectPath, 'project.json'))) {
        try {
          const meta = await readProjectMeta(projectPath);
          version = meta.version;
          minecraftVersion = meta.minecraft_version;
        } catch {
          /* ignore */
        }
      }
      const { canceled, filePath } = await dialog.showSaveDialog({
        title: 'Export Pack',
        defaultPath: path.join(
          getDefaultExportDir(),
          `${path.basename(projectPath)}-v${version}.zip`
        ),
        filters: [{ name: 'Zip Files', extensions: ['zip'] }],
      });
      if (canceled || !filePath) return;
      const summary = await exportPack(projectPath, filePath, minecraftVersion);
      setDefaultExportDir(path.dirname(filePath));
      return summary;
    }
  );
  ipc.handle('export-projects', (_e, names: string[]) =>
    exportProjects(baseDir, names)
  );
}
